plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'org.hidetake.ssh' version '2.10.1'
}

remotes {
    server {
        host = project.properties["serverUrl"]
        port = project.properties["serverPort"].toInteger()
        user = project.properties["userName"]
        password = project.properties["password"]
        knownHosts = allowAnyHosts
    }
}

group 'com.marine.fishtank.server'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"

    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'

    compile "io.github.java-native:jssc:2.9.2"
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "org.slf4j:slf4j-simple:1.7.25"
    compile 'com.google.code.gson:gson:2.9.0'
    compile 'org.mariadb.jdbc:mariadb-java-client:3.0.4'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

task release() {
    dependsOn("jar")
    dependsOn("copyScript")
    dependsOn("publishFishTank")
}

task copyScript {
    def releaseDir = "$buildDir/out"
    mkdir "$releaseDir"

    fileTree("src/script").each {file ->
        copy {
            from file.path
            into "$releaseDir"
        }
    }

    copy {
        from "$buildDir/libs/fishServer-${version}.jar"
        into "$releaseDir"
    }
}

jar {
    baseName "fishServer"

    manifest {
        attributes 'Main-Class': 'com.marine.fishtank.server.MainKt'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    println("jarFile=${project.buildDir}")
}


task publishFishTank {
    doLast {
        ssh.run {
            session(remotes.server) {
                // Any Gradle methods or properties are available in a session closure
                fileTree("$buildDir/out").each {
                    // do some operations
                    println "Deploy ${it.name}"
                    put from: "${it.path}", into: "./fishtank"
                }
            }
        }
    }
}
